// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ExtractedPfxFile.cs" company="OBeautifulCode">
//   Copyright (c) OBeautifulCode 2018. All rights reserved.
// </copyright>
// <auto-generated>
//   Sourced from NuGet package. Will be overwritten with package update except in OBeautifulCode.Security.Recipes source.
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace OBeautifulCode.Security.Recipes
{
    using System.Collections.Generic;

    using OBeautifulCode.Assertion.Recipes;

    using Org.BouncyCastle.Crypto;
    using Org.BouncyCastle.X509;

    /// <summary>
    /// Represents cryptographic objects extracted from a PFX file.
    /// </summary>
#if !OBeautifulCodeSecurityRecipesProject
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [System.CodeDom.Compiler.GeneratedCode("OBeautifulCode.Security.Recipes", "See package version number")]
    internal
#else
    public
#endif
    class ExtractedPfxFile
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtractedPfxFile"/> class.
        /// </summary>
        /// <param name="certificateChain">The certificate chain, in no particular order.</param>
        /// <param name="privateKey">The private key.</param>
        public ExtractedPfxFile(
            IReadOnlyList<X509Certificate> certificateChain,
            AsymmetricKeyParameter privateKey)
        {
            new { certificateChain }.AsArg().Must().NotBeNullNorEmptyEnumerableNorContainAnyNulls();

            this.CertificateChain = certificateChain;
            this.PrivateKey = privateKey;
        }

        /// <summary>
        /// Gets the certificate chain, in no particular order.
        /// </summary>
        public IReadOnlyList<X509Certificate> CertificateChain { get; }

        /// <summary>
        /// Gets the private key.
        /// </summary>
        public AsymmetricKeyParameter PrivateKey { get; }
    }
}
